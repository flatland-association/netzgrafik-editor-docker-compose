services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=netzgrafikeditor
      - POSTGRES_PASSWORD=netzgrafikeditor
      - POSTGRES_DB=netzgrafikeditor
    ports:
      - "5432:5432"


  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    # as we need to access keycloak from backend Docker container under docker internal port, we need to start Keycloak on 8081, port forwarding in Docker run is not enough
    command: start-dev --import-realm --http-port 8081 --hostname localhost
    ports:
      - 8081:8081
    volumes:
      # TODO can we avoid copying the realm config? Download in an init container from the repo....?
      - ./keycloak/netzgrafikeditor-realm.json:/opt/keycloak/data/import/netzgrafikeditor-realm.json
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=netzgrafikeditor

  keycloak-healthcheck:
    image: busybox
    depends_on:
      keycloak:
        condition: service_started
    command: sh -c "until wget -q -O- http://keycloak:8081/realms/netzgrafikeditor/.well-known/openid-configuration >/dev/null 2>&1; do sleep 1; done"
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 1s
      timeout: 1s
      retries: 5


  backend:
    build: backend
    entrypoint: /bin/bash
    command: >
      -c "nginx && /cnb/process/web"
    ports:
      - 8080:8080
    depends_on:
      keycloak-healthcheck:
        condition: service_completed_successfully
    volumes:
      - ./backend/application.yml:/workspace/BOOT-INF/classes/application.yml
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: [ "CMD", "bash", "-c", "curl -v --fail http://127.0.0.1:8080/actuator/health" ]
      interval: 5s
      timeout: 10s
      retries: 15
  frontend:
    image: ghcr.io/schweizerischebundesbahnen/netzgrafik-editor-frontend:2.9.11
    # set platform as necessary:
    platform: linux/x86_64
    ports:
      - 4200:4200
    depends_on:
      backend:
        condition: service_healthy

